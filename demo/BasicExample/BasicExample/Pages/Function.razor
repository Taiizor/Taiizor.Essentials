@page "/function"

@inject IDialogService DialogService

<a href="">Return Home</a>

<h3>Function</h3>

<button class="btn btn-success" id="53X" @onclick="CallReference">Click Me Reference</button>

<h5>Reference Text: @ReferenceText</h5>

<button class="btn btn-danger" id="53X" @onclick="CallAssembly">Click Me Assembly</button>

<h5>Assembly Text: @AssemblyText</h5>

@code {
    private string ReferenceText { get; set; } = "Empty";
    private static string AssemblyText { get; set; } = "Empty";

    [JSInvokable("SetTextReference")]
    //[JSInvokableAttribute("SetTextReference")]
    public void SetTextReference(string Text)
    {
        ReferenceText = Text;

        StateHasChanged();
    }

    //[JSInvokable("GetBoolReference")]
    [JSInvokableAttribute("GetBoolReference")]
    public bool GetBoolReference()
    {
        return true;
    }

    [JSInvokable("SetTextAssembly")]
    //[JSInvokableAttribute("SetTextAssembly")]
    public static void SetTextAssembly(string Text)
    {
        AssemblyText = Text;
    }

    //[JSInvokable("GetBoolAssembly")]
    [JSInvokableAttribute("GetBoolAssembly")]
    public static bool GetBoolAssembly()
    {
        return false;
    }

    private async void CallReference()
    {
        await Invoke.ReferenceMethod(DotNetObjectReference.Create(this), "SetTextReference", "Whooaa!");
        
        await DialogService.DisplayConfirm("Reference Method", $"{await Invoke.ReferenceMethodBool(DotNetObjectReference.Create(this), "GetBoolReference")}", "Ok");
    }

    private async void CallAssembly()
    {
        await Invoke.AssemblyMethod("BasicExample", "SetTextAssembly", "Whooaa!");

        StateHasChanged();

        await DialogService.DisplayConfirm("Assembly Method", $"{await Invoke.AssemblyMethodBool("BasicExample", "GetBoolAssembly")}", "Ok");

        //await DialogService.DisplayConfirm("Assembly Method", $"{await Invoke.AssemblyMethodBool(Project.Name, "GetBoolAssembly", "Whooaa!")}", "Ok");
    }
}